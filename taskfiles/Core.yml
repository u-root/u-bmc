version: '3'

tasks:
  # Build the main go project file
  u-bmc-build:
    run: once
    cmds:
      - echo "Building u-bmc executable..."
      - go build -o build/u-bmc
      - echo "Done!"

  # Generate a private key
  u-bmc-key:
    run: once
    dir: build/boot/keys
    cmds:
      - echo "Generating private key..."
      - chmod 700 .
      - openssl genrsa -out u-bmc.key # This could be ECDSA I guess
      - echo "Done!"
    status:
      - test -f u-bmc.key

  # Build the signer and let it generate a public key
  signer:
    run: once
    deps:
      - u-bmc-key
    dir: build/boot/signer
    cmds:
      - echo "Building signer and generating public key..."
      - go build -o signer ../../../boot/signer
      - echo | ./signer > /dev/null
      - echo "Done!"
    status:
      - test -f signer
      - test -f ../keys/u-bmc.pub

  # Build the LinuxBoot bootloader
  loader:
    run: once
    dir: build/boot/loader
    cmds:
      - echo "Building LinuxBoot loader..."
      - GOARM={{.__GOARM}} GOARCH={{.__ARCH}} go build -ldflags="-s -w" -o loader ../../../boot/loader/
      - echo "Done!"
    status:
      - test -f loader

  # Build the ASPEED boot firmware
  aspeed-boot-bin:
    run: once
    deps:
      - :initramfs:loader-cpio
      - :devtree:dtb-boot
      - :kernel:linux-build-boot
    dir: build/boot
    cmds:
      - echo "Building ASPEED boot firmware for {{.__SOC}}"
      - |
        {{.__TOOLCHAIN}}gcc -c -o data.o ../../soc/{{.__SOC}}/data.S
      - |
        {{.__TOOLCHAIN}}gcc \
        -Wl,--build-id=none \
        -Wl,-T ../../soc/{{.__SOC}}/boot.ld \
        -Wl,--no-dynamic-linker \
        -nostdlib \
        ../../soc/{{.__SOC}}/start.S \
        ../../soc/{{.__SOC}}/platform_g$(echo $__SOC | cut -c 5).S \
        ../../soc/{{.__SOC}}/main.S \
        data.o \
        boot-config.auto.h \
        ../../platform/{{.__TARGET}}/boot/config.h \
        -I ../../platform/{{.__TARGET}}/boot/ \
        -I ../../boot
      - |
        {{.__TOOLCHAIN}}objcopy --only-section=.text -O binary boot.elf boot.bin
      - echo "Done!"
    status:
      - test {{.__SOC}} != ast2400
      - test {{.__SOC}} != ast2500

  # Download bluecmd's arm kexec binary #TODO Do we need this anymore? arm has kexec_load and arm64 even kexec_file_load by now
  kexec:
    run: once
    dir: build/boot
    cmds:
      - echo "Downloading kexec binary..." 
      - curl -O https://github.com/bluecmd/tools/raw/master/arm/kexec
      - echo "Done!"
    status:
      - test -f kexec
