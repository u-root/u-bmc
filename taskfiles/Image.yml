version: '3'

tasks:
  # Create a flashable image
  flash-img:
    dir: build
    cmds:
      - echo "Creating flashable image..."
      - |
        dd if=/dev/zero | \
        tr '\000' '\377' | \
        dd iflag=fullblock \
        bs=1M \
        count={{.__ROM_SIZE}} \
        of=flash.img
      - dd conv=notrunc if=img/{{.__SOC}}.img of=flash.img
      - echo "Done!"
    sources:
      - img/{{.__SOC}}.img
    generates:
      - flash.img

  # Create an image based off of the UBI image
  aspeed-img:
    dir: build/img
    deps:
      - ubi-img
    cmds:
      - echo "Creating {{.__SOC}}.img..."
      - |
        dd if=/dev/zero | \
        tr '\000' '\377' | \
        dd iflag=fullblock \
        bs=64k \
        count=$(echo $(($(grep SIZE= ../boot/ubmc-flash-layout.dtsi | cut -d= -f2) / 65536))) \
        of={{.__SOC}}.img
      - dd conv=notrunc if=../boot/boot.bin of={{.__SOC}}.img
      - cat ubi.img >> {{.__SOC}}.img
      - echo "Done!"
    sources:
      - ../boot/ubmc-flash-layout.dtsi
      - ../boot/boot.bin
      - ubi.img
    generates:
      - ./{{.__SOC}}.img

  # Assemble the rootfs folder and its content
  rootfs:
    dir: build
    cmds:
      - echo "Creating rootfs..."
        # Create rootfs with gobusybox
      - GOARM={{.__GOARM}} GOARCH={{.__ARCH}} ./u-bmc ../platform/{{.__TARGET}}/cmd/* {{.CLI_ARGS}}
        # Set nameserver #TODO Move to u-bmc system startup
      - echo "nameserver 2606:4700:4700::1111" >> rootfs/etc/resolv.conf
      - echo "nameserver 2606:4700:4700::1001" >> rootfs/etc/resolv.conf
      - echo "nameserver 1.1.1.1" >> rootfs/etc/resolv.conf
      - echo "nameserver 1.0.0.1" >> rootfs/etc/resolv.conf
      - echo "::1 localhost" >> rootfs/etc/hosts
      - echo "127.0.0.1 localhost" >> rootfs/etc/hosts
        # Copy over runtime kernel, devicetree and their signatures 
      - cp linux/zImage.full rootfs/boot/zImage-"{{.GIT_VERSION}}"
      - cat linux/zImage.full | boot/signer >> rootfs/boot/zImage-{{.GIT_VERSION}}.gpg
      - touch boot/platform.dtb.full # Needed for Qemu as it generates the dtb dynamically
      - cp boot/platform.dtb.full rootfs/boot/platform-{{.GIT_VERSION}}.dtb
      - cat boot/platform.dtb.full | boot/signer > rootfs/boot/platform-{{.GIT_VERSION}}.dtb.gpg
        # Link files with git revision names to generic names
      - ln -sf zImage-{{.GIT_VERSION}} rootfs/boot/zImage
      - ln -sf zImage-{{.GIT_VERSION}}.gpg rootfs/boot/zImage.gpg
      - ln -sf platform-{{.GIT_VERSION}}.dtb rootfs/boot/platform.dtb
      - ln -sf platform-{{.GIT_VERSION}}.dtb.gpg rootfs/boot/platform.dtb.gpg
      - cat rootfs/bin/bb | boot/signer > rootfs/bin/bb.gpg
      - cp boot/keys/u-bmc.pub rootfs/etc/
      - ln -sf bb.gpg rootfs/bin/init.gpg
      - cp ../proto/system.textpb.default rootfs/config/system.textpb
    vars:
      GIT_VERSION:
        sh: git describe --tags --long --always
    sources:
      - u-bmc
      - linux/zImage*
      - boot/platform.dtb*
      - boot/signer
      - boot/keys/*
    generates:
      - rootfs/bin/bb

  # Create an UBIFS image
  ubifs-root:
    dir: build
    cmds:
      - echo "Creating ubifs image..."
      - mkdir -p img
      - |
        fakeroot sh -c "\
        mkfs.ubifs \
        -x zlib \
        -r rootfs \
        -R 0 \
        -m 1 \
        -e 65408 \
        -c 2047 \
        -o img/rootfs.img"
      - echo "Done!"
    sources:
      - rootfs/
    generates:
      - img/rootfs.img

  # Generate UBI image by reading ubi.cfg
  ubi-img:
    deps:
      - ubifs-root
    dir: build/img
    cmds:
      - echo "Creating ubi.img..."
      - ubinize -o ubi.img -m 1 -p 64KiB ../../ubi.cfg
      - echo "Done!"
    sources:
      - ../../ubi.cfg
      - rootfs.img
    generates:
      - test -f ubi.img

  # Create an EROFS image
  erofs-root:
    dir: build
    cmds:
      - echo "Creating erofs image..."
      - mkdir -p img
      - |
        mkfs.erofs \
        -z lz4hc \
        -U 26ab0401-3f49-4fc2-a172-c8aa02aceaf3 \
        --all-root \
        img/rootfs.img \
        rootfs
      - echo "Done!"
    sources:
      - rootfs/
    generates:
      - img/rootfs.img      
