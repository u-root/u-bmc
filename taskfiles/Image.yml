version: '3'

tasks:
  # Create a flashable image
  flash-img:
    run: once
    deps:
      - u-bmc-img
    dir: build
    cmds:
      - echo "Creating flashable image..."
      - |
        dd if=/dev/zero | \
        tr '\000' '\377' | \
        dd iflag=fullblock \
        bs=1M \
        count={{.__ROM_SIZE}} \
        of=flash.img
      - dd conv=notrunc if=img/u-bmc.img of=flash.img
      - echo "Done!"
    status:
      - test -f flash.img

  # Create an image based off of the UBI image
  u-bmc-img:
    run: once
    deps:
      - ubi-img
      - :devtree:flash-layout
    dir: build/img
    cmds:
      - echo "Creating u-bmc.img..."
      - |
        dd if=/dev/zero | \
        tr '\000' '\377' | \
        dd iflag=fullblock \
        bs=64k \
        count=$(echo $(($(grep SIZE= ../boot/ubmc-flash-layout.dtsi | cut -d= -f2) / 65536))) \
        of=u-bmc.img
      - dd conv=notrunc if=ubi.img of=u-bmc.img
      - echo "Done!"
    status:
      - test -f u-bmc.img

  # Create the underlying rootfs
  ubifs-root:
    run: once
    deps:
      - :core:signer
      - :initramfs:build
      - :devtree:dtb-full
      - :kernel:linux-build-full
    dir: build
    cmds:
      - echo "Creating rootfs..."
        # Create root folder
      - mkdir -p root/root root/etc root/boot img
        # Set nameserver #TODO Move to u-bmc system startup
      - echo "nameserver 2606:4700:4700::1111" >> root/etc/resolv.conf
      - echo "nameserver 2606:4700:4700::1001" >> root/etc/resolv.conf
      - echo "nameserver 1.1.1.1" >> root/etc/resolv.conf
      - echo "nameserver 1.0.0.1" >> root/etc/resolv.conf
      - echo "::1 localhost" >> root/etc/hosts
      - echo "127.0.0.1 localhost" >> root/etc/hosts
        # Copy over runtime kernel, devicetree and their signatures 
      - cp linux/zImage.full root/boot/zImage-"{{.GIT_VERSION}}"
      - cat linux/zImage.full | boot/signer/signer >> root/boot/zImage-{{.GIT_VERSION}}.dtb.gpg
      - cp boot/platform.dtb.full root/boot/platform-{{.GIT_VERSION}}.dtb
      - cat boot/platform.dtb.full | boot/signer/signer > root/boot/platform-{{.GIT_VERSION}}.dtb.gpg
        # Link files with git revision names to generic names
      - ln -s zImage-{{.GIT_VERSION}} root/boot/zImage
      - ln -s zImage-{{.GIT_VERSION}}.gpg root/boot/zImage.gpg
      - ln -s platform-{{.GIT_VERSION}}.dtb root/boot/platform.dtb
      - ln -s platform-{{.GIT_VERSION}}.dtb.gpg root/boot/platform.dtb.gpg
      - cp boot/keys/u-bmc.pub root/etc/
      - ln -s bbin/bb.gpg root/init.gpg
      - mkdir root/config
      - cp ../proto/system.textpb.default root/config/system.textpb
        # Rewrite the symlink to a non-absolute to allow non-chrooted following.
        # This is a workaround for the fact that the loader cannot chroot currently.
      - ln -sf bbin/bb root/init
      - |
        fakeroot sh -c "\
        (cd root; cpio -id < ../initramfs.cpio) && \
        cat root/bbin/bb | boot/signer/signer > root/bbin/bb.gpg && \
        mkfs.ubifs \
        -x zlib \
        -r root \
        -R 0 \
        -m 1 \
        -e 65408 \
        -c 2047 \
        -o img/ubifs-root.img"
      - echo "Done!"
    vars:
      GIT_VERSION:
        sh: git describe --tags --long --always
    status:
      - test -f img/ubifs-root.img

  # Generate UBI image by reading ubi.cfg
  ubi-img: 
    run: once
    deps:
      - ubifs-root
    dir: build/img
    cmds:
      - echo "Creating ubi.img..."
      - ubinize -o ubi.img -m 1 -p 64KiB ../../ubi.cfg
      - echo "Done!"
    status:
      - test -f ubi.img
