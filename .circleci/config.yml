version: 2
workflows:
  version: 2
  build_and_test:
    jobs:
      - clean-code
      - test:
          requires:
            - clean-code
      - race:
          requires:
            - clean-code
      - compile:
          requires:
            - clean-code
      - image:
          requires:
            - clean-code
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - compile
      - image
jobs:
  clean-code:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-bmc
    steps:
      - checkout
      - run:
          name: Install dep
          command: |
            wget https://github.com/golang/dep/releases/download/v0.5.1/dep-linux-amd64
            mv dep-linux-amd64 dep
            chmod +x dep
      - run:
          name: Install ineffassign
          command: go get github.com/gordonklaus/ineffassign
      - run:
          name: Create test key
          command: |
            ssh-keygen -t rsa -b 4096 -C "testkey" -N "testpass" -f ./ssh_keys
            touch config/i_agree_to_the_acme_terms
            go generate ./config/
      - run:
          name: vet
          command: |
            make get
            go vet $(go list ./... | grep -v /vendor/)
      - run:
          name: gofmt
          command: test -z "$(gofmt -s -l $(go list ./... | grep -v /vendor/ | cut -f 4- -d '/'))"
      - run:
          name: ineffassign
          command: ineffassign .
  test:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-bmc
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Create test key
          command: |
            ssh-keygen -t rsa -b 4096 -C "testkey" -N "testpass" -f ./ssh_keys
            touch config/i_agree_to_the_acme_terms
            go generate ./config/
      - run:
          name: Test all
          command: |
            make get
            make test
      - run:
          name: Test coverage
          command: make test TESTFLAGS=-cover
  race:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-bmc
    environment:
      - CGO_ENABLED: 1
    steps:
      - checkout
      - run:
          name: Create test key
          command: |
            ssh-keygen -t rsa -b 4096 -C "testkey" -N "testpass" -f ./ssh_keys
            touch config/i_agree_to_the_acme_terms
            go generate ./config/
      - run:
          name: Race detector
          command: |
            make get
            make test TESTFLAGS=-race
  compile:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-bmc
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Create test key
          command: |
            ssh-keygen -t rsa -b 4096 -C "testkey" -N "testpass" -f ./ssh_keys
            touch config/i_agree_to_the_acme_terms
            go generate ./config/
      - run:
          name: build all commands
          command: |
            make get
            cd cmd
            go install -a ./...
            cd ../
            go install -a ./platform/quanta-f06-leopard-ddr3/cmd/uinit
  image:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-bmc
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command:
            sudo apt-get install gcc-arm-none-eabi mtd-utils fakeroot flex bison device-tree-compiler bc libssl-dev zlib1g-dev libglib2.0-dev libpixman-1-dev unzip cpio patch libelf-dev qemu-kvm
      - run:
          name: Compile qemu
          command: |
            git clone https://github.com/openbmc/qemu.git --depth 1
            # TOOD(bluecmd): Temporary until these can be upstreamed correctly
            cd qemu
            patch -p1 < /go/src/github.com/u-root/u-bmc/qemu-leopard.patch
            cd ..
            mkdir qemu/build
            cd qemu/build
            ../configure --target-list=arm-softmmu
            make -j8
            sudo make install
      - run:
          name: Create test key
          command: |
            ssh-keygen -t rsa -b 4096 -C "testkey" -N "testpass" -f ./ssh_keys
            touch config/i_agree_to_the_acme_terms
      # TODO(bluecmd): This step should probably be cached somehow
      - run:
          name: Update submodules
          command: |
            git submodule init
            # Since linux is huge and we're tracking a branch, submodules
            # take a long time and we cannot use depth. Fetch the latest zip
            # instead
            wget https://github.com/openbmc/linux/archive/dev-5.2.zip
            unzip dev-5.2.zip
            rm dev-5.2.zip
            rm -rf linux/
            mv linux-dev-5.2/ linux/
            (cd linux/; ../linux-patches/apply.sh)
      - run:
          name: Build image
          command: |
            go generate ./config/
            make get
            make
      - store_artifacts:
          path: flash.img
          destination: flash.img
      - run:
          name: Run integration tests
          command: |
            make integration/bzImage
            export UBMC_QEMU=qemu-system-arm
            export UBMC_NATIVE_QEMU=qemu-system-x86_64
            cd integration/
            go test
      - store_artifacts:
          path: integration/serial
      - run:
          name: Copy failed integration tests
          command: |
            mkdir /tmp/integration-data/
            tar -cvf /tmp/integration-data/integration.tar /tmp/ubmc-integration*/
          when: on_fail
      - store_artifacts:
          path: /tmp/integration-data/
