From 1e3472e275346cb4318ac912959e816323bac0d5 Mon Sep 17 00:00:00 2001
From: Marvin Drees <marvin.drees@9elements.com>
Date: Thu, 5 Aug 2021 15:12:22 +0200
Subject: [PATCH] Add support for reading MAC from Mellanox CX-3

- Patch is property of Christian Svensson
---
 net/ncsi/internal.h    | 5 ++---
 net/ncsi/ncsi-cmd.c    | 4 ++++
 net/ncsi/ncsi-manage.c | 1 -
 net/ncsi/ncsi-rsp.c    | 5 +++--
 4 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/net/ncsi/internal.h b/net/ncsi/internal.h
index e37102546be6..89b6c0e4304c 100644
--- a/net/ncsi/internal.h
+++ b/net/ncsi/internal.h
@@ -82,19 +82,18 @@ enum {
 #define NCSI_OEM_BCM_CMD_GMA            0x01   /* CMD ID for Get MAC */
 /* Mellanox specific OEM Command */
 #define NCSI_OEM_MLX_CMD_GMA            0x00   /* CMD ID for Get MAC */
-#define NCSI_OEM_MLX_CMD_GMA_PARAM      0x1b   /* Parameter for GMA  */
 #define NCSI_OEM_MLX_CMD_SMAF           0x01   /* CMD ID for Set MC Affinity */
 #define NCSI_OEM_MLX_CMD_SMAF_PARAM     0x07   /* Parameter for SMAF         */
 /* OEM Command payload lengths*/
 #define NCSI_OEM_BCM_CMD_GMA_LEN        12
-#define NCSI_OEM_MLX_CMD_GMA_LEN        8
+#define NCSI_OEM_MLX_CMD_GMA_LEN        7
 #define NCSI_OEM_MLX_CMD_SMAF_LEN        60
 /* Offset in OEM request */
 #define MLX_SMAF_MAC_ADDR_OFFSET         8     /* Offset for MAC in SMAF    */
 #define MLX_SMAF_MED_SUPPORT_OFFSET      14    /* Offset for medium in SMAF */
 /* Mac address offset in OEM response */
 #define BCM_MAC_ADDR_OFFSET             28
-#define MLX_MAC_ADDR_OFFSET             8
+#define MLX_MAC_ADDR_OFFSET             4
 
 
 struct ncsi_channel_version {
diff --git a/net/ncsi/ncsi-cmd.c b/net/ncsi/ncsi-cmd.c
index ba9ae482141b..410c2142cfb3 100644
--- a/net/ncsi/ncsi-cmd.c
+++ b/net/ncsi/ncsi-cmd.c
@@ -50,6 +50,10 @@ static void ncsi_cmd_build_header(struct ncsi_pkt_hdr *h,
 	h->reserved1[0] = 0;
 	h->reserved1[1] = 0;
 
+	if (nca->type == NCSI_PKT_CMD_OEM) {
+		return;
+	}
+
 	/* Fill with calculated checksum */
 	checksum = ncsi_calculate_checksum((unsigned char *)h,
 					   sizeof(*h) + nca->payload);
diff --git a/net/ncsi/ncsi-manage.c b/net/ncsi/ncsi-manage.c
index ffff8da707b8..440cccd3e431 100644
--- a/net/ncsi/ncsi-manage.c
+++ b/net/ncsi/ncsi-manage.c
@@ -726,7 +726,6 @@ static int ncsi_oem_gma_handler_mlx(struct ncsi_cmd_arg *nca)
 	memset(&u, 0, sizeof(u));
 	u.data_u32[0] = ntohl(NCSI_OEM_MFR_MLX_ID);
 	u.data_u8[5] = NCSI_OEM_MLX_CMD_GMA;
-	u.data_u8[6] = NCSI_OEM_MLX_CMD_GMA_PARAM;
 
 	nca->data = u.data_u8;
 
diff --git a/net/ncsi/ncsi-rsp.c b/net/ncsi/ncsi-rsp.c
index 888ccc2d4e34..b6d8aaf2e31d 100644
--- a/net/ncsi/ncsi-rsp.c
+++ b/net/ncsi/ncsi-rsp.c
@@ -627,6 +627,8 @@ static int ncsi_rsp_handler_oem_mlx_gma(struct ncsi_request *nr)
 	saddr.sa_family = ndev->type;
 	ndev->priv_flags |= IFF_LIVE_ADDR_CHANGE;
 	memcpy(saddr.sa_data, &rsp->data[MLX_MAC_ADDR_OFFSET], ETH_ALEN);
+	/* Management MAC is reply +2 and does never appear to wrap byte boundary */
+	saddr.sa_data[5] += 2;
 	/* Set the flag for GMA command which should only be called once */
 	ndp->gma_flag = 1;
 
@@ -647,8 +649,7 @@ static int ncsi_rsp_handler_oem_mlx(struct ncsi_request *nr)
 	rsp = (struct ncsi_rsp_oem_pkt *)skb_network_header(nr->rsp);
 	mlx = (struct ncsi_rsp_oem_mlx_pkt *)(rsp->data);
 
-	if (mlx->cmd == NCSI_OEM_MLX_CMD_GMA &&
-	    mlx->param == NCSI_OEM_MLX_CMD_GMA_PARAM)
+	if (mlx->cmd == NCSI_OEM_MLX_CMD_GMA)
 		return ncsi_rsp_handler_oem_mlx_gma(nr);
 	return 0;
 }
-- 
2.32.0

